{
    "project": {},
    "files": {
        "offliner.js": {
            "name": "offliner.js",
            "modules": {
                "sources": 1,
                "fetchers": 1,
                "updaters": 1
            },
            "classes": {
                "UpdateControl": 1,
                "Offliner": 1,
                "Resource": 1,
                "Fetcher": 1,
                "PrefetchConfig": 1,
                "UpdateImplementation": 1,
                "UpdateConfig": 1,
                "SourceHandler": 1,
                "FetchConfig": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "sources": {
            "name": "sources",
            "submodules": {},
            "classes": {
                "UpdateControl": 1,
                "Offliner": 1,
                "Resource": 1,
                "Fetcher": 1,
                "PrefetchConfig": 1,
                "UpdateImplementation": 1,
                "UpdateConfig": 1,
                "SourceHandler": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "offliner.js",
            "line": 769,
            "description": "A collection of {{#crossLink \"FetchSource\"}}{{/crossLink}} constructors to\nconfigure offliner."
        },
        "fetchers": {
            "name": "fetchers",
            "submodules": {},
            "classes": {},
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "offliner.js",
            "line": 834,
            "description": "A collection of {{#crossLink \"Fetcher\"}}{{/crossLink}} constructors to\nconfigure offliner."
        },
        "updaters": {
            "name": "updaters",
            "submodules": {},
            "classes": {
                "FetchConfig": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "offliner.js",
            "line": 780,
            "description": "A collection of {{#crossLink \"UpdateImplementation\"}}{{/crossLink}}\nconstructors to configure offliner."
        }
    },
    "classes": {
        "UpdateControl": {
            "name": "UpdateControl",
            "shortname": "UpdateControl",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sources",
            "file": "offliner.js",
            "line": 8,
            "access": "private",
            "tagname": ""
        },
        "Offliner": {
            "name": "Offliner",
            "shortname": "Offliner",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sources",
            "file": "offliner.js",
            "line": 38,
            "description": "Creates a new Offliner instance.",
            "params": [
                {
                    "name": "-",
                    "description": "a unique name representing the offline handler. This\nallow you to instantiate several offliners for the same or different\nworkers without causing collisions between the configuration and cache\nnames.",
                    "type": "String"
                }
            ]
        },
        "Resource": {
            "name": "Resource",
            "shortname": "Resource",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sources",
            "file": "offliner.js",
            "line": 520,
            "description": "A resource is an object with a type and other fields to be retrieved by\nthe {{#crossLink \"Fetcher\"}}{{/crossLink}} with the same type."
        },
        "Fetcher": {
            "name": "Fetcher",
            "shortname": "Fetcher",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sources",
            "file": "offliner.js",
            "line": 535,
            "description": "A fetcher is an object for handling resouces during the prefetching\nprefetch process. A fetcher must include a `type` and normalize and\nprefetch implementations.",
            "access": "private",
            "tagname": ""
        },
        "PrefetchConfig": {
            "name": "PrefetchConfig",
            "shortname": "PrefetchConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sources",
            "file": "offliner.js",
            "line": 569,
            "description": "Prefetch process consists into recovering from the Web those\nresources configured in offliner. To do so, you call\n{{#crossLink \"PrefetchConfig/use:method\"}}{{/crossLink}}, then list the\nresources by calling {{#crossLink \"PrefetchConfig/resources:method\"}}\n{{/crossLink}}."
        },
        "UpdateImplementation": {
            "name": "UpdateImplementation",
            "shortname": "UpdateImplementation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sources",
            "file": "offliner.js",
            "line": 639,
            "description": "An object implementing methods to check for new version and update the\nactivate cache."
        },
        "UpdateConfig": {
            "name": "UpdateConfig",
            "shortname": "UpdateConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sources",
            "file": "offliner.js",
            "line": 679,
            "description": "Update consists into determine if there is a new version and\nthen evolve the current cache to be up to date. To register an update\nalgorithm you provide a {{#crossLink \"UpdateImplementation\"}}\n{{/crossLink}} instance by using {{#crossLink \"UpdateConfig/use:method\"}}\n{{/crossLink}}."
        },
        "SourceHandler": {
            "name": "SourceHandler",
            "shortname": "SourceHandler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "sources",
            "file": "offliner.js",
            "line": 769,
            "description": "A source handler is a **function** that accepts a request and the\nactive cache and return a Promise resolving into the proper Response. It's\nused with {{#crossLink \"FetchConfig/use:method\"}}{{/crossLink}} of\n{{#crossLink \"FetchConfig\"}}{{/crossLink}}.\n\n`sourceHandler(request, activeCache)`"
        },
        "FetchConfig": {
            "name": "FetchConfig",
            "shortname": "FetchConfig",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "updaters",
            "file": "offliner.js",
            "line": 780,
            "description": "The fetch process consists into pass the request along a list\nof source handlers. You call {{#crossLink \"FetchConfig/use:method\"}}\n{{/crossLink}} to add a new source handler to the pipeline."
        }
    },
    "classitems": [
        {
            "file": "offliner.js",
            "line": 13,
            "description": "Indicates if updates are enabled.",
            "itemtype": "property",
            "name": "enabled",
            "type": "boolean",
            "class": "UpdateControl"
        },
        {
            "file": "offliner.js",
            "line": 19,
            "description": "Set to `true` when the update has run once.",
            "itemtype": "property",
            "name": "alreadyRunOnce",
            "type": "boolean",
            "class": "UpdateControl"
        },
        {
            "file": "offliner.js",
            "line": 25,
            "description": "Holds the reference to the timer for the next update.",
            "itemtype": "property",
            "name": "intervalId",
            "type": "Number",
            "class": "UpdateControl"
        },
        {
            "file": "offliner.js",
            "line": 31,
            "description": "Holds the reference to the promise representing the currently running\nupdate process.",
            "itemtype": "property",
            "name": "inProgressProcess",
            "type": "Object",
            "class": "UpdateControl"
        },
        {
            "file": "offliner.js",
            "line": 52,
            "description": "Prevent the worker to be installed twice.",
            "type": "boolean",
            "itemtype": "property",
            "name": "_isStarted",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 61,
            "description": "The global update control.",
            "type": "UpdateControl",
            "itemtype": "property",
            "name": "_updateControl",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 75,
            "description": "Set to `true` when the worker is waiting for the first fetch.",
            "type": "Booleaan",
            "itemtype": "property",
            "name": "_firstFetch",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 84,
            "description": "API to configure the fetching pipeline.",
            "type": "FetchConfig",
            "itemtype": "property",
            "name": "fetch",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 92,
            "description": "API to configure the prefetch process.",
            "type": "PrefetchConfig",
            "itemtype": "property",
            "name": "prefetch",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 100,
            "description": "API to configure the update process.",
            "type": "UpdateConfig",
            "itemtype": "property",
            "name": "update",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 109,
            "description": "Installs the service worker in stand-alone mode.",
            "itemtype": "method",
            "name": "standalone",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 146,
            "description": "Gets a setting for the offliner handler.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "The setting to be retrieved.",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 163,
            "description": "Sets a setting for the offliner handler.",
            "itemtype": "method",
            "name": "set",
            "params": [
                {
                    "name": "key",
                    "description": "The setting.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "The value to be set.",
                    "type": "Any"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 179,
            "description": "Return a fake URL scheme for a setting.",
            "itemtype": "method",
            "name": "_getConfigURL",
            "params": [
                {
                    "name": "key",
                    "description": "The setting.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a fake URL scheme for the setting."
            },
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 191,
            "description": "Install the timers for periodic updates.",
            "itemtype": "method",
            "name": "_schedulePeriodicUpdates",
            "params": [
                {
                    "name": "fromInstall",
                    "description": "Indicates if the call comes from the\n{{#crossLink \"Offliner/_install:method\"}}{{/crossLink}} method.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 218,
            "description": "Determine if the worker should prefetch or update after (re)installing the\nservice worker.",
            "itemtype": "method",
            "name": "_install",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 237,
            "description": "Initializes the current version and active cache for the first time.",
            "itemtype": "method",
            "name": "_initialize",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 249,
            "description": "Performs a generic update process. It consists into:\n\n  1. Check for a new version using a middleware.\n  2. Prepare the new version database.\n  3. Evolve the offline cache using the middleware.\n  4. Clean-up.",
            "itemtype": "method",
            "name": "_update",
            "params": [
                {
                    "name": "fromInstall",
                    "description": "Indicates if the call comes from the\n{{#crossLink \"Offliner/_install:method\"}}{{/crossLink}} method.",
                    "type": "Boolean"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 289,
            "description": "Return the CACHE name for a version given.",
            "itemtype": "method",
            "name": "_getCacheNameForVersion",
            "params": [
                {
                    "name": "version",
                    "description": "The version to calculate the name for.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise resolving with the name for the\nversion.",
                "type": "Promise<String>"
            },
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 302,
            "description": "Opens current active cache and starts prefetch.",
            "itemtype": "method",
            "name": "_prefetch",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 312,
            "description": "Processes prefetch declared resources using the registered middlewares.",
            "itemtype": "method",
            "name": "_doPrefetch",
            "params": [
                {
                    "name": "cache",
                    "description": "The cache for the middlewares to populate.",
                    "type": "Cache"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 343,
            "description": "Obtains the latest version using the update middleware.",
            "itemtype": "method",
            "name": "_getLatestVersion",
            "return": {
                "description": "Tag representing the latest version. The tag will\nbe used as suffix for the new cache.",
                "type": "Promise<String>"
            },
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 355,
            "description": "Determine if there is a new version based on the latest version and the\ncurrent one by using the update middleware.",
            "itemtype": "method",
            "name": "_checkIfNewVersion",
            "return": {
                "description": "remoteVersion The new version tag is returned\nif there is a new version or `null` otherwise.",
                "type": "Promise<String>"
            },
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 384,
            "description": "Evolves the current cache to the new cache by using the update middleware.",
            "itemtype": "method",
            "name": "_evolveCache",
            "params": [
                {
                    "name": "newCache",
                    "description": "The new cache.",
                    "type": "Cache"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 398,
            "description": "Uses dynamic information to open the active CACHE.",
            "itemtype": "method",
            "name": "_openActiveCache",
            "return": {
                "description": "A promise resolving to the active cache.",
                "type": "Promise<Cache>"
            },
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 409,
            "description": "Change the active cache to be the evolved cache if available. Once the\nactive cache has been updated, the former one is lost.",
            "itemtype": "method",
            "name": "_activateNextCache",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 430,
            "description": "Makes active cache to be the next-version cache populated during a past\nupdate process. After swapping, the previous cache is lost.",
            "itemtype": "method",
            "name": "_swapCaches",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 460,
            "description": "Updates the current version.",
            "itemtype": "method",
            "name": "_updateCurrentVersion",
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 471,
            "description": "Before serving anything from cache, this method emulates an activation\nand triggers {{#crossLink \"Offliner/_activateNextCache:method\"}}\n{{/crossLink}} to convert the evolved into the current active cache.\n\nNotice the evolved cache was created in a previous update process, now\nis ready but it did not replace yet the active cache.",
            "itemtype": "method",
            "name": "_fetchAfterCacheActivation",
            "params": [
                {
                    "name": "request",
                    "description": "The request to be fetched.",
                    "type": "Request"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 493,
            "description": "Use configured middlewares to perform the fetch process.",
            "itemtype": "method",
            "name": "_fetch",
            "params": [
                {
                    "name": "request",
                    "description": "The request to be fetched.",
                    "type": "Request"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "Offliner"
        },
        {
            "file": "offliner.js",
            "line": 526,
            "description": "The type to associate the resource with an specific\n{{#crossLink \"Fetcher\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "readonly": "",
            "class": "Resource"
        },
        {
            "file": "offliner.js",
            "line": 544,
            "description": "While prefetching resources, each resource has a `type`. The resource\nis handled by the fetcher whose `type` match it.",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "readonly": "",
            "class": "Fetcher"
        },
        {
            "file": "offliner.js",
            "line": 553,
            "description": "Normalizes a resource not following the {{#crossLink Resource}}\n{{/crossLink}} convention.",
            "itemtype": "method",
            "name": "normalize",
            "params": [
                {
                    "name": "resource",
                    "description": "The denormalized resource.",
                    "type": "Any"
                }
            ],
            "class": "Fetcher"
        },
        {
            "file": "offliner.js",
            "line": 561,
            "description": "Retrieve a set of resources.",
            "itemtype": "method",
            "name": "prefetch",
            "params": [
                {
                    "name": "resource",
                    "description": "The denormalized resource.",
                    "type": "Resource[]"
                },
                {
                    "name": "cache",
                    "description": "The cache to populate.",
                    "type": "Cache"
                }
            ],
            "class": "Fetcher"
        },
        {
            "file": "offliner.js",
            "line": 583,
            "description": "Register a {{#crossLink Fetcher}}{{/crossLink}}. The fetcher will be used\nto retrieve the resources of the fetcher's type.",
            "itemtype": "method",
            "name": "use",
            "params": [
                {
                    "name": "fetcher",
                    "description": "The fetcher to be used for resources of fetcher's\ntype.",
                    "type": "Fetcher"
                }
            ],
            "chainable": 1,
            "class": "PrefetchConfig"
        },
        {
            "file": "offliner.js",
            "line": 598,
            "description": "Add resources to the prefetch list of resources.",
            "itemtype": "method",
            "name": "resources",
            "params": [
                {
                    "name": "resources",
                    "description": "The list of resources to be added.\nEach resource in the list is normalized by the last registered fetcher so\nsome fetchers allows a short syntax for its resources.",
                    "type": "Resource|Resource[]"
                }
            ],
            "chainable": 1,
            "class": "PrefetchConfig"
        },
        {
            "file": "offliner.js",
            "line": 629,
            "itemtype": "method",
            "name": "fetchers",
            "return": {
                "description": "the registered fetchers.",
                "type": "Fetcher[]"
            },
            "class": "PrefetchConfig"
        },
        {
            "file": "offliner.js",
            "line": 646,
            "description": "Checks for a new version.",
            "itemtype": "method",
            "name": "check",
            "return": {
                "description": "A promise resolving in the new version.",
                "type": "Promise<String>"
            },
            "class": "UpdateImplementation"
        },
        {
            "file": "offliner.js",
            "line": 653,
            "description": "Determines if the checked new version is actually a new version.",
            "itemtype": "method",
            "name": "isNewVersion",
            "params": [
                {
                    "name": "currentVersion",
                    "description": "The current version.",
                    "type": "String"
                },
                {
                    "name": "latestVersion",
                    "description": "The version from\n{{#crossLink \"UpdateImplementation/check:method\"}}{{/crossLink}}.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A promise resolving to a non empty string if\n`latestVersion` is new compared to `currentVersion` or a `falsy` if not.\nThe string must be different from `currentVersion`.",
                "type": "Promise<String>"
            },
            "class": "UpdateImplementation"
        },
        {
            "file": "offliner.js",
            "line": 665,
            "description": "Populate the updated cache.",
            "itemtype": "method",
            "name": "evolve",
            "params": [
                {
                    "name": "currentCache",
                    "description": "The current active cache. **Do not modify this\ncache!**",
                    "type": "Cache"
                },
                {
                    "name": "nextCache",
                    "description": "The cache to be populated.",
                    "type": "Cache"
                },
                {
                    "name": "reinstall",
                    "description": "A function to trigger the prefetch process. Some\nupdate algorithms just want to prefetch again.",
                    "type": "Function"
                }
            ],
            "return": {
                "description": "A promise resolving after finishing the update process.\nIf you simply wants to simply reinstall, return the value from `reinstall`\ninvocation.",
                "type": "Promise"
            },
            "class": "UpdateImplementation"
        },
        {
            "file": "offliner.js",
            "line": 692,
            "description": "Gets or set an option.",
            "itemtype": "method",
            "name": "option",
            "params": [
                {
                    "name": "optname",
                    "description": "The name of the option to be set or get.",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "If provided, the value to be set for the passed option.",
                    "type": "Any",
                    "optional": true
                }
            ],
            "chainable": 1,
            "return": {
                "description": "The value of the option when getting.",
                "type": "Any"
            },
            "class": "UpdateConfig"
        },
        {
            "file": "offliner.js",
            "line": 711,
            "description": "Register the update implementation.",
            "itemtype": "method",
            "name": "use",
            "params": [
                {
                    "name": "impl",
                    "description": "The update implementation to be used.",
                    "type": "UpdateImplementation"
                }
            ],
            "chainable": 1,
            "class": "UpdateConfig"
        },
        {
            "file": "offliner.js",
            "line": 724,
            "description": "Flags set at the beginning of the update process. They include:",
            "itemtype": "property",
            "name": "flags",
            "type": "UpdateFlags",
            "class": "UpdateConfig"
        },
        {
            "file": "offliner.js",
            "line": 739,
            "description": "Triggers the {{#crossLink \"UpdateImplementation/check:method\"}}\n{{/crossLink}} algorithm of the registered update implementation.",
            "itemtype": "method",
            "name": "check",
            "class": "UpdateConfig"
        },
        {
            "file": "offliner.js",
            "line": 749,
            "description": "Calls the {{#crossLink \"UpdateImplementation/isNewVersion:method\"}}\n{{/crossLink}} check of the registered update implementation.",
            "itemtype": "method",
            "name": "isNewVersion",
            "class": "UpdateConfig"
        },
        {
            "file": "offliner.js",
            "line": 759,
            "description": "Performs the {{#crossLink \"UpdateImplementation/evolve:method\"}}\n{{/crossLink}} process of the registered update implementation.",
            "itemtype": "method",
            "name": "evolve",
            "class": "UpdateConfig"
        },
        {
            "file": "offliner.js",
            "line": 791,
            "description": "Adds a new {{#crossLink \"SourceHandler\"}}{{/crossLink}} to the fetching\npipeline.",
            "itemtype": "method",
            "name": "use",
            "params": [
                {
                    "name": "source",
                    "description": "The handler to be added to the pipeline.",
                    "type": "SourceHandler"
                }
            ],
            "chainable": 1,
            "class": "FetchConfig"
        },
        {
            "file": "offliner.js",
            "line": 804,
            "description": "Gets the current pipeline of sources.",
            "itemtype": "method",
            "name": "pipeline",
            "return": {
                "description": "The current pipeline of source handlers.",
                "type": "SourceHandler[]"
            },
            "class": "FetchConfig"
        },
        {
            "file": "offliner.js",
            "line": 814,
            "description": "Adds an always failing source handler to the pipeline.",
            "itemtype": "method",
            "name": "orFail",
            "class": "FetchConfig"
        }
    ],
    "warnings": []
}